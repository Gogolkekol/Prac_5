# -*- coding: utf-8 -*-
"""python_practice_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hnvJvBIHUhRxSOOIsABZv1zvSw54wNrO

# I. OOP

1. (7б). Створіть клас Animal, додайте docstring, три атрибути, один з яких має значення за замовчуванням та два методи на свій розсуд.
"""

class Animal:
  def _init_(self,name,age):
    self.name = name
    self.age = 2

"""1.1. (5б). Створіть два обʼєкти цього класу. На одному обʼєкті отримайте значення його атрибуту, а на іншому викличте один з його методів."""

animal1 = Animal()
animal1

"""2. (9б). Створіть клас, де атрибути мають різні рівні доступу. Спробуйте отримати їхні значення та опишіть результати."""

class Human:
    def __init__(self, name, age, has_green_eyes):
        self.name = name
        self.age = age
        self.has_green_eyes = has_green_eyes

"""3. (8б). Як ви розумієте термін self? Для чого використовується метод __init __?

*місце для відповіді*

4. (8б). Створіть клас Фігура без атрибутів, з методом get_area для отримання площі фігури, що повертає 0 та __add __, який приймає self та other в якості аргументів, а повертає суму площин фігур self та other.
"""

class Figure:
    def get_area(self):
        return 0

    def __add__(self, other):
        total_area = self.get_area() + other.get_area()
        result_figure = Figure()
        result_figure.set_area(total_area)
        return result_figure

    def set_area(self, area):
        pass

"""5. (11б). Створіть 2 дочірніх класи від Фігури: Трикутник та Коло, які мають атрибути, необхідні для розрахунку площин. Визначте метод get_area в кожному з них так, щоби вони розраховували площу в залежності від формули для кожного типу фігури. Створіть обʼєкт класу Трикутник та обʼєкт класу Коло. Виконайте операцію суми за допомогою оператора + між ними."""



"""6. (7б). Продемонструйте різницю між isinstance та issubclass."""

class Animal:
  pass
class Dog(Animal):
  pass

dog = Dog()

print(isinstance(dog, Dog))
print(isinstance(dog, Animal))

class Animal:
    pass

class Dog(Animal):
    pass

print(issubclass(Dog, Animal))
print(issubclass(Animal, Dog))

"""7. (16б). Створіть клас BankAccount з приватними атрибутами balance та account_number.
Реалізуйте методи поповнення та зняття коштів, забезпечивши належну інкапсуляцію. Підказка: використовуйте декоратори getter та setter.
"""

class BankAccount:
    def __init__(self, account_number, initial_balance=0.0):
        self._account_number = account_number
        self._balance = initial_balance

    @property
    def account_number(self):
        return self._account_number

    @property
    def balance(self):
        return self._balance

    @balance.setter
    def balance(self, new_balance):
        if new_balance >= 0:
            self._balance = new_balance
        else:
            print("Баланс не може бути від'ємним.")

    def deposit(self, amount):
        if amount > 0:
            self._balance += amount
            print(f"Поповнення на {amount} грн успішно виконано. Новий баланс: {self._balance} грн.")
        else:
            print("Сума поповнення повинна бути більше 0.")

    def withdraw(self, amount):
        if 0 < amount <= self._balance:
            self._balance -= amount
            print(f"Зняття {amount} грн успішно виконано. Новий баланс: {self._balance} грн.")
        elif amount > self._balance:
            print("Недостатньо коштів на рахунку.")
        else:
            print("Неприпустима сума для зняття.")

"""8. (16б). Створіть клас Library, який містить список об'єктів типу Book.
Реалізуйте методи для додавання книги, видалення книги та відображення списку книг.
"""

class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

class Library:
    def __init__(self):
        self.books = []

    def add_book(self, book):
        """Додає книгу до бібліотеки."""
        self.books.append(book)
        print(f"Книга '{book.title}' додана до бібліотеки.")

    def remove_book(self, title):
        """Видаляє книгу за назвою з бібліотеки."""
        for book in self.books:
            if book.title == title:
                self.books.remove(book)
                print(f"Книга '{title}' видалена з бібліотеки.")
                return
        print(f"Книга '{title}' не знайдена в бібліотеці.")

    def display_books(self):
        """Виводить список усіх книг в бібліотеці."""
        if not self.books:
            print("Бібліотека порожня.")
        else:
            print("Список книг у бібліотеці:")
            for book in self.books:
                print(f"Назва: {book.title}, Автор: {book.author}")

library = Library()

book1 = Book("The Great Gatsby", "F. Scott Fitzgerald")
book2 = Book("To Kill a Mockingbird", "Harper Lee")

library.add_book(book1)
library.add_book(book2)

library.display_books()

library.remove_book("The Great Gatsby")

library.display_books()

"""9. (13б). Створіть клас Person з атрибутами name та age.
Створіть ще один клас Employee з такими атрибутами, як department та salary.
Створіть клас Manager, який успадковує обидва класи Person та Employee. Продемонструйте використання множинної спадковості, створивши обʼєкт класу Manager та отримавши mro для цього класу.
"""

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

class Employee:
    def __init__(self, department, salary):
        self.department = department
        self.salary = salary

class Manager(Person, Employee):
    def __init__(self, name, age, department, salary, title):
        Person.__init__(self, name, age)
        Employee.__init__(self, department, salary)
        self.title = title

manager = Manager(name="John Doe", age=40, department="IT", salary=80000, title="Senior Manager")

print(f"Ім'я: {manager.name}")
print(f"Вік: {manager.age}")
print(f"Відділ: {manager.department}")
print(f"Зарплата: {manager.salary}")
print(f"Посада: {manager.title}")

print("Method Resolution Order (MRO):", Manager.mro())

"""# Вітаю! Ви велика(ий) молодець, що впоралась(вся). Похваліть себе та побалуйте чимось приємним. Я Вами пишаюся."""